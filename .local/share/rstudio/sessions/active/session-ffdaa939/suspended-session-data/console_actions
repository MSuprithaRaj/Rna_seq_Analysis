{
    "type": [
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
    ],
    "data": [
        "Error in lfcShrink(dds = dds, res = tumour_v_control, coef = 5, type = \"apeglm\") : \n  coef <= length(resultsNamesDDS) is not TRUE\n",
        "> ",
        "# make lung vs melanoma",
        "> ",
        "tumour_v_control <- results(dds, filterFun=ihw, alpha=0.05, c(\"condition\", \"tumour\", \"control\"))",
        "> ",
        "res3 <- lfcShrink(dds=dds, res=tumour_v_control, coef=4, type=\"apeglm\")",
        "Error in lfcShrink(dds = dds, res = tumour_v_control, coef = 4, type = \"apeglm\") : \n  'coef' should specify same coefficient as in results 'res'\n",
        "> ",
        "# to make lung vs melanoma, relevel the dds object reference level and redo the DESeq call",
        "> ",
        "dds$control<- relevel(dds$control, ref = \"tumour\")",
        "Error in relevel.default(dds$control, ref = \"tumour\") : \n  'relevel' only for (unordered) factors\n",
        "> ",
        "# to make lung vs melanoma, relevel the dds object reference level and redo the DESeq call",
        "> ",
        "dds$condition<- relevel(dds$condition, ref = \"tumour\")",
        "> ",
        "dds <- DESeq(dds)",
        "> ",
        "",
        "> ",
        "# double check it worked",
        "> ",
        "resultsNames(dds)",
        "[1] \"Intercept\"                   \"replicate_2_vs_1\"            \"replicate_3_vs_1\"            \"condition_control_vs_tumour\"\n",
        "> ",
        "# make lung vs melanoma",
        "> ",
        "tumour_v_control <- results(dds, filterFun=ihw, alpha=0.05, c(\"condition\", \"tumour\", \"control\"))",
        "> ",
        "res3 <- lfcShrink(dds=dds, res=tumour_v_control, coef=, type=\"apeglm\")",
        "Error in lfcShrink(dds = dds, res = tumour_v_control, coef = , type = \"apeglm\") : \n  !missing(coef) is not TRUE\n",
        "> ",
        "# make lung vs melanoma",
        "> ",
        "tumour_v_control <- results(dds, filterFun=ihw, alpha=0.05, c(\"condition\", \"tumour\", \"control\"))",
        "> ",
        "res3 <- lfcShrink(dds=dds, res=tumour_v_control, coef=5, type=\"apeglm\")",
        "Error in lfcShrink(dds = dds, res = tumour_v_control, coef = 5, type = \"apeglm\") : \n  coef <= length(resultsNamesDDS) is not TRUE\n",
        "> ",
        "# make lung vs melanoma",
        "> ",
        "tumour_v_control <- results(dds, filterFun=ihw, alpha=0.05, c(\"condition\", \"tumour\", \"control\"))",
        "> ",
        "res3 <- lfcShrink(dds=dds, res=tumour_v_control, coef=4, type=\"apeglm\")",
        "Error in lfcShrink(dds = dds, res = tumour_v_control, coef = 4, type = \"apeglm\") : \n  'coef' should specify same coefficient as in results 'res'\n",
        "> ",
        "# to make lung vs melanoma, relevel the dds object reference level and redo the DESeq call",
        "> ",
        "dds$condition<- relevel(dds$condition, ref = \"control\")",
        "> ",
        "dds <- DESeq(dds)",
        "> ",
        "",
        "> ",
        "# double check it worked",
        "> ",
        "resultsNames(dds)",
        "[1] \"Intercept\"                   \"replicate_2_vs_1\"            \"replicate_3_vs_1\"            \"condition_tumour_vs_control\"\n",
        "> ",
        "# make lung vs melanoma",
        "> ",
        "tumour_v_control <- results(dds, filterFun=ihw, alpha=0.05, c(\"condition\", \"tumour\", \"control\"))",
        "> ",
        "res3 <- lfcShrink(dds=dds, res=tumour_v_control, coef=4, type=\"apeglm\")",
        "> ",
        "summary(res3)",
        "\nout of 21474 with nonzero total read count\nadjusted p-value < 0.05\nLFC > 0 (up)       : 269, 1.3%\nLFC < 0 (down)     : 199, 0.93%\noutliers [1]       : 0, 0%\n[1] see 'cooksCutoff' argument of ?results\nsee metadata(res)$ihwResult on hypothesis weighting\n\n",
        "> ",
        "# make lung vs melanoma",
        "> ",
        "tumour_1v_control_1 <- results(dds, filterFun=ihw, alpha=0.05, c(\"condition\", \"tumour_1\", \"control_1\"))",
        "Error in cleanContrast(object, contrast, expanded = isExpanded, listValues = listValues,  : \n  tumour_1 and control_1 should be levels of condition such that condition_tumour_1_vs_control and condition_control_1_vs_control are contained in 'resultsNames(object)'\n",
        "> ",
        "get_upregulated <- function(df){",
        "+ ",
        "\tkey <- intersect(rownames(df)[which(df$log2FoldChange>=1)], rownames(df)[which(df$pvalue<=0.05)])",
        "+ ",
        "  results <- as.data.frame((df)[which(rownames(df) %in% key),])",
        "+ ",
        "\treturn(results)",
        "+ ",
        "}",
        "> ",
        "get_downregulated <- function(df){",
        "+ ",
        "  \tkey <- intersect(rownames(df)[which(df$log2FoldChange<=-1)], rownames(df)[which(df$pvalue<=0.05)])",
        "+ ",
        "  \tresults <- as.data.frame((df)[which(rownames(df) %in% key),])",
        "+ ",
        "  \treturn(results)",
        "+ ",
        "}",
        "> ",
        "annotate_de_genes <- function(df){",
        "+ ",
        "",
        "+ ",
        "    df$hgnc_symbol <- rownames(df)",
        "+ ",
        "    mart <- useMart(biomart = \"ensembl\", dataset = \"hsapiens_gene_ensembl\")",
        "+ ",
        "    info <- getBM(attributes=c(\"hgnc_symbol\",",
        "+ ",
        "                               \"ensembl_gene_id_version\",",
        "+ ",
        "                               \"chromosome_name\",",
        "+ ",
        "                               \"start_position\",",
        "+ ",
        "                               \"end_position\",",
        "+ ",
        "                               \"strand\",",
        "+ ",
        "                               \"entrezgene_description\"),",
        "+ ",
        "                  filters = c(\"hgnc_symbol\"),",
        "+ ",
        "                  values = df$hgnc_symbol,",
        "+ ",
        "                  mart = mart,",
        "+ ",
        "                  useCache=FALSE)",
        "+ ",
        "",
        "+ ",
        "    tmp <- merge(df, info, by=\"hgnc_symbol\")",
        "+ ",
        "    tmp$strand <- gsub(\"-1\", \"-\", tmp$strand)",
        "+ ",
        "    tmp$strand <- gsub(\"1\", \"+\", tmp$strand)",
        "+ ",
        "    tmp$hgnc_symbol <- make.names(tmp$hgnc_symbol, unique = T)",
        "+ ",
        "    tmp <- tmp[!grepl(\"CHR\", tmp$chromosome_name),]",
        "+ ",
        "",
        "+ ",
        "    output_col <- c(\"Gene\", \"Ensembl ID\", \"Chromosome\", \"Start\", \"Stop\", \"Strand\", \"Description\", \"Log2FC\", \"P-value\", \"Adj P-value\")",
        "+ ",
        "    tmp <- subset(tmp, select=c(hgnc_symbol, ensembl_gene_id_version, chromosome_name, start_position, end_position, strand, entrezgene_description, log2FoldChange, pvalue, padj))",
        "+ ",
        "    colnames(tmp) <- output_col",
        "+ ",
        "",
        "+ ",
        "    if(min(tmp$Log2FC) > 0){",
        "+ ",
        "        tmp <- tmp[order(-tmp$Log2FC),]",
        "+ ",
        "    }else{",
        "+ ",
        "        tmp <- tmp[order(tmp$Log2FC),]",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "    return(tmp)",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "## remove NA values from results",
        "> ",
        "res1 <- na.omit(res1)",
        "> ",
        "",
        "> ",
        "## calculate min/max axis values for plot (optional)",
        "> ",
        "min_width <- min(res1$log2FoldChange)",
        "> ",
        "max_width <- max(res1$log2FoldChange)",
        "> ",
        "max_height <- -log10(min(res1[res1$pvalue>0, 5]))",
        "> ",
        "",
        "> ",
        "## Grab top 10 up-reg genes for plot",
        "> ",
        "up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)",
        "> ",
        "up <- up[order(-up$log2FoldChange),]",
        "> ",
        "up_list <- head(rownames(up), n=10L)",
        "> ",
        "",
        "> ",
        "## Grab top 10 down-reg genes for plot",
        "> ",
        "down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)",
        "> ",
        "down <- down[order(down$log2FoldChange),]",
        "> ",
        "down_list <- head(rownames(down), n=10L)",
        "> ",
        "",
        "> ",
        "## place top 20 DE genes in vector (optinal...)",
        "> ",
        "plot_top_20 <- c(up_list, down_list)",
        "> ",
        "",
        "> ",
        "EnhancedVolcano(res1,",
        "+ ",
        "                lab=rownames(res1),",
        "+ ",
        "                x=\"log2FoldChange\",",
        "+ ",
        "                y=\"pvalue\",",
        "+ ",
        "                selectLab=plot_top_20,",
        "+ ",
        "                drawConnectors=TRUE,",
        "+ ",
        "                legendPosition = \"none\",",
        "+ ",
        "                FCcutoff=1.0,",
        "+ ",
        "                pCutoff=0.05,",
        "+ ",
        "                title=\"Volcano Plot\",",
        "+ ",
        "                subtitle=\"Tumour vs. Control\",",
        "+ ",
        "                caption = paste0('Total Genes = ', nrow(res1)),",
        "+ ",
        "                xlim=c(min_width, max_width),",
        "+ ",
        "                ylim=c(0, max_height))",
        "> ",
        "res1 <- na.omit(tumour_v_ctrl)",
        "> ",
        "",
        "> ",
        "min_width <- min(res1$log2FoldChange)",
        "> ",
        "max_width <- max(res1$log2FoldChange)",
        "> ",
        "max_height <- -log10(min(res1[res1$pvalue>0, 5]))",
        "> ",
        "",
        "> ",
        "up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)",
        "> ",
        "up <- up[order(-up$log2FoldChange),]",
        "> ",
        "up_list <- head(rownames(up), n=10L)",
        "> ",
        "",
        "> ",
        "down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)",
        "> ",
        "down <- down[order(down$log2FoldChange),]",
        "> ",
        "down_list <- head(rownames(down), n=10L)",
        "> ",
        "",
        "> ",
        "plot_top_20 <- c(up_list, down_list)",
        "> ",
        "EnhancedVolcano(res1,",
        "+ ",
        "\t\t\t          lab=rownames(res1),",
        "+ ",
        "          \t\t\tx=\"log2FoldChange\",",
        "+ ",
        "          \t\t\ty=\"pvalue\",",
        "+ ",
        "          \t\t\tselectLab=plot_top_20,",
        "+ ",
        "          \t\t\tdrawConnectors=TRUE,",
        "+ ",
        "          \t\t\tFCcutoff=1.0,",
        "+ ",
        "          \t\t\tpCutoff=0.05,",
        "+ ",
        "          \t\t\ttitle=\"Volcano Plot\",",
        "+ ",
        "          \t\t\tsubtitle=\"Tumour vs. Control\",",
        "+ ",
        "          \t\t\tlegendLabSize=8,",
        "+ ",
        "          \t\t\tcaption = paste0('Total Genes = ', nrow(res1)))",
        "> ",
        "",
        "> ",
        "##reset res1 for heatmaps",
        "> ",
        "res1 <- na.omit(res1)",
        "> ",
        "## remove NA values from results",
        "> ",
        "res1 <- na.omit(res1)",
        "> ",
        "",
        "> ",
        "## calculate min/max axis values for plot (optional)",
        "> ",
        "min_width <- min(res1$log2FoldChange)",
        "> ",
        "max_width <- max(res1$log2FoldChange)",
        "> ",
        "max_height <- -log10(min(res1[res1$pvalue>0, 5]))",
        "> ",
        "",
        "> ",
        "## Grab top 10 up-reg genes for plot",
        "> ",
        "up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)",
        "> ",
        "up <- up[order(-up$log2FoldChange),]",
        "> ",
        "up_list <- head(rownames(up), n=10L)",
        "> ",
        "",
        "> ",
        "## Grab top 10 down-reg genes for plot",
        "> ",
        "down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)",
        "> ",
        "down <- down[order(down$log2FoldChange),]",
        "> ",
        "down_list <- head(rownames(down), n=10L)",
        "> ",
        "",
        "> ",
        "## place top 20 DE genes in vector (optinal...)",
        "> ",
        "plot_top_20 <- c(up_list, down_list)",
        "> ",
        "",
        "> ",
        "EnhancedVolcano(res1,",
        "+ ",
        "                lab=rownames(res1),",
        "+ ",
        "                x=\"log2FoldChange\",",
        "+ ",
        "                y=\"pvalue\",",
        "+ ",
        "                selectLab=plot_top_20,",
        "+ ",
        "                drawConnectors=TRUE,",
        "+ ",
        "                legendPosition = \"none\",",
        "+ ",
        "                FCcutoff=1.0,",
        "+ ",
        "                pCutoff=0.05,",
        "+ ",
        "                title=\"Volcano Plot\",",
        "+ ",
        "                subtitle=\"tumour vs. Control\",",
        "+ ",
        "                caption = paste0('Total Genes = ', nrow(res1)),",
        "+ ",
        "                xlim=c(min_width, max_width),",
        "+ ",
        "                ylim=c(0, max_height))",
        "> ",
        "## remove NA values from results",
        "> ",
        "res1 <- na.omit(res1)",
        "> ",
        "",
        "> ",
        "## calculate min/max axis values for plot (optional)",
        "> ",
        "min_width <- min(res1$log2FoldChange)",
        "> ",
        "max_width <- max(res1$log2FoldChange)",
        "> ",
        "max_height <- -log10(min(res1[res1$pvalue>0, 5]))",
        "> ",
        "",
        "> ",
        "## Grab top 10 up-reg genes for plot",
        "> ",
        "up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)",
        "> ",
        "up <- up[order(-up$log2FoldChange),]",
        "> ",
        "up_list <- head(rownames(up), n=10L)",
        "> ",
        "",
        "> ",
        "## Grab top 10 down-reg genes for plot",
        "> ",
        "down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)",
        "> ",
        "down <- down[order(down$log2FoldChange),]",
        "> ",
        "down_list <- head(rownames(down), n=10L)",
        "> ",
        "",
        "> ",
        "## place top 20 DE genes in vector (optinal...)",
        "> ",
        "plot_top_20 <- c(up_list, down_list)",
        "> ",
        "",
        "> ",
        "EnhancedVolcano(res1,",
        "+ ",
        "                lab=rownames(res1),",
        "+ ",
        "                x=\"log2FoldChange\",",
        "+ ",
        "                y=\"pvalue\",",
        "+ ",
        "                selectLab=plot_top_20,",
        "+ ",
        "                drawConnectors=TRUE,",
        "+ ",
        "                legendPosition = \"none\",",
        "+ ",
        "                FCcutoff=1.0,",
        "+ ",
        "                pCutoff=0.05,",
        "+ ",
        "                title=\"Volcano Plot\",",
        "+ ",
        "                subtitle=\"tumour vs. Control\",",
        "+ ",
        "                caption = paste0('Total Genes = ', nrow(res1)),",
        "+ ",
        "                xlim=c(min_width, max_width),",
        "+ ",
        "                ylim=c(0, max_height))",
        "> ",
        "res1 <- na.omit(tumour_v_ctrl)",
        "> ",
        "",
        "> ",
        "min_width <- min(res1$log2FoldChange)",
        "> ",
        "max_width <- max(res1$log2FoldChange)",
        "> ",
        "max_height <- -log10(min(res1[res1$pvalue>0, 5]))",
        "> ",
        "",
        "> ",
        "up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)",
        "> ",
        "up <- up[order(-up$log2FoldChange),]",
        "> ",
        "up_list <- head(rownames(up), n=10L)",
        "> ",
        "",
        "> ",
        "down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)",
        "> ",
        "down <- down[order(down$log2FoldChange),]",
        "> ",
        "down_list <- head(rownames(down), n=10L)",
        "> ",
        "",
        "> ",
        "plot_top_20 <- c(up_list, down_list)",
        "> ",
        "EnhancedVolcano(res1,",
        "+ ",
        "\t\t\t          lab=rownames(res1),",
        "+ ",
        "          \t\t\tx=\"log2FoldChange\",",
        "+ ",
        "          \t\t\ty=\"pvalue\",",
        "+ ",
        "          \t\t\tselectLab=plot_top_20,",
        "+ ",
        "          \t\t\tdrawConnectors=TRUE,",
        "+ ",
        "          \t\t\tFCcutoff=1.0,",
        "+ ",
        "          \t\t\tpCutoff=0.05,",
        "+ ",
        "          \t\t\ttitle=\"Volcano Plot\",",
        "+ ",
        "          \t\t\tsubtitle=\"tumour vs. Control\",",
        "+ ",
        "          \t\t\tlegendLabSize=8,",
        "+ ",
        "          \t\t\tcaption = paste0('Total Genes = ', nrow(res1)))",
        "> ",
        "",
        "> ",
        "##reset res1 for heatmaps",
        "> ",
        "res1 <- na.omit(res1)",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(de_up)",
        "Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'x' in selecting a method for function 'rownames': object 'de_up' not found\n",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(de_up)",
        "Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'x' in selecting a method for function 'rownames': object 'de_up' not found\n",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(up)",
        "> ",
        "down <- rownames(de_down)",
        "Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'x' in selecting a method for function 'rownames': object 'de_down' not found\n",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(up)",
        "> ",
        "down <- rownames(down)",
        "> ",
        "",
        "> ",
        "# subset matrix to include only DE genes",
        "> ",
        "key <- c(up, down)",
        "> ",
        "subset <- subset[which(rownames(subset) %in% key),]",
        "> ",
        "",
        "> ",
        "# scale and center the values",
        "> ",
        "mat <- as.matrix(scale(t(subset), center = T))",
        "> ",
        "",
        "> ",
        "# basic plot to check we're plotting something sensible",
        "> ",
        "#pheatmap(t(mat))",
        "> ",
        "",
        "> ",
        "# spruce it up a bit..",
        "> ",
        "ann <- data.frame(Condition = c(rep(\"Control\", 3), rep(\"tumour\", 3)))",
        "> ",
        "rownames(ann) <- rownames(mat)",
        "> ",
        "col <- c(\"blue\", \"forestgreen\")",
        "> ",
        "names(col) <- c(\"Control\", \"tumour\")",
        "> ",
        "ann_col <- list(Condition = col)",
        "> ",
        "",
        "> ",
        "pheatmap(t(mat), ",
        "+ ",
        "         show_rownames = FALSE,",
        "+ ",
        "         annotation_col = ann,",
        "+ ",
        "         annotation_colors = ann_col,",
        "+ ",
        "         color = hcl.colors(100, \"PRGn\",rev=F))",
        "> ",
        "## convert result object to dataframe",
        "> ",
        "res <- as.data.frame(res1) # tumour vs control",
        "> ",
        "res$hgnc_symbol <- rownames(res)",
        "> ",
        "",
        "> ",
        "# compute summary stat",
        "> ",
        "fgsea_rank <- res %>%",
        "+ ",
        "              dplyr::select(hgnc_symbol, log2FoldChange) %>%",
        "+ ",
        "              na.omit() %>%",
        "+ ",
        "              distinct() %>%",
        "+ ",
        "              group_by(hgnc_symbol) %>%",
        "+ ",
        "              summarize(stat=mean(log2FoldChange))",
        "> ",
        "",
        "> ",
        "fgsea_rank",
        "> ",
        "# create named list",
        "> ",
        "rank <- deframe(fgsea_rank)",
        "> ",
        "head(rank, 20)",
        "                     A1BG         A1CF          A2M        A2ML1        A2MP1      A3GALT2       A4GALT        A4GNT \n-0.013521913 -0.070717455  0.151302767 -0.178179246  2.339741878  0.397354802 -0.003578694  1.417910706 -0.449161265 \n        AAAS         AACS       AACSP1        AADAC      AADACL3      AADACL4        AADAT        AAGAB         AAK1 \n-0.050395570 -0.240345260 -1.601524288 -0.888838934 -0.004556136  1.671566619  0.139796142 -0.191357582  0.326965135 \n       AAMDC         AAMP \n-0.059535870 ",
        "-0.026687365 \n",
        "> ",
        "# read in gmt file",
        "> ",
        "pathway <- gmtPathways(\"/home/rstudio/c6.all.v2023.2.Hs.symbols.gmt\")",
        "> ",
        "head(pathway, 1)",
        "$AKT_UP.V1_DN\n  [1] \"ACKR3\"    \"ADGRL1\"   \"ADHFE1\"   \"ALPL\"     \"AMPD2\"    \"ANGPTL4\"  \"AQP5\"     \"ASF1A\"    \"ASS1\"     \"AXIN2\"   \n [11] \"BCS1L\"    \"BEX4\"     \"BLVRB\"    \"BTBD2\"    \"C11orf71\" \"C1R\"      \"C1S\"      \"CAP2\"     \"CAV2\"     \"CBS\"     \n [21] \"CD248\"    \"CDC42BPA\" \"CDH16\"    \"CDPF1\"    \"CELA1\"    \"CHAD\"     \"CHN2\"     \"CHST12\"   \"CNN2\"     \"COL17A1\" \n [31] \"CSDC2\"    \"DNAJA3\"   \"DPT\"      \"DRAM1\"    \"EDARADD\"  \"EFEMP1\"   \"EFEMP2\"   \"EIF4E3\"   \"ESR2\"     \"EXOSC1\"  \n [41] \"FAH\"      \"FAM20C\"   \"FANK1\"   ",
        " \"FAS\"      \"FBXO32\"   \"FHOD3\"    \"FKBP11\"   \"FMO2\"     \"FMO3\"     \"FUT10\"   \n [51] \"FUT8\"     \"FXYD1\"    \"G6PC2\"    \"GALNT16\"  \"GAS1\"     \"GATAD2B\"  \"GHR\"      \"GNA14\"    \"GNMT\"     \"GRAMD1A\" \n [61] \"GSPT2\"    \"GSTA4\"    \"HEBP1\"    \"HIC1\"     \"HMGCS2\"   \"HPS1\"     \"HTRA1\"    \"IBSP\"     \"ID3\"      \"IFFO1\"   \n [71] \"IFRD2\"    \"IL13RA1\"  \"IL17RC\"   \"IRS1\"     \"IRS2\"     \"ISLR\"     \"ITGBL1\"   \"ITIH5\"    \"ITPKB\"    \"KCNK3\"   \n [81] \"KCNN4\"    \"KCTD12\"   \"KLF2\"     \"KRT15\"    \"KRT5\"     \"LIMD1\"    \"LPL\"      \"LTC4S\"   ",
        " \"MATN2\"    \"MEPE\"    \n [91] \"MERTK\"    \"MMAA\"     \"MOCOS\"    \"MRPS6\"    \"MSL2\"     \"MSRB2\"    \"MYOC\"     \"NAT8\"     \"NCAM1\"    \"NID1\"    \n[101] \"NR1D1\"    \"NT5DC3\"   \"OGN\"      \"PADI3\"    \"PAQR7\"    \"PDE4B\"    \"PDE9A\"    \"PDGFRA\"   \"PDIA5\"    \"PDLIM3\"  \n[111] \"PDLIM4\"   \"PDZRN3\"   \"PHF1\"     \"PI16\"     \"PKP1\"     \"PLA2G4A\"  \"PLEK2\"    \"PLPP3\"    \"PLTP\"     \"PM20D1\"  \n[121] \"PNLIPRP1\" \"POLD2\"    \"POLI\"     \"PPP1R3C\"  \"PROM1\"    \"PTGIS\"    \"PUS7\"     \"RAMP1\"    \"RCE1\"     \"RECK\"    \n[131] \"RMND1\"    \"RNF25\"   ",
        " \"RORC\"     \"RPAP3\"    \"RPS6KB2\"  \"RTKN\"     \"RXRB\"     \"S1PR3\"    \"SASH1\"    \"SATB1\"   \n[141] \"SCARA3\"   \"SCARA5\"   \"SCCPDH\"   \"SERPINF2\" \"SFRP2\"    \"SH3BGR\"   \"SIRT3\"    \"SIX5\"     \"SLC18A1\"  \"SLC22A12\"\n[151] \"SLC37A4\"  \"SLC39A13\" \"SLC39A4\"  \"SLC7A5\"   \"SLCO3A1\"  \"SLIT3\"    \"SMARCD3\"  \"SNHG6\"    \"STAT5A\"   \"STMP1\"   \n[161] \"SULT1E1\"  \"SYPL2\"    \"TCAF2\"    \"TCF21\"    \"TCF3\"     \"TEC\"      \"TIMP3\"    \"TNFRSF19\" \"TNNC2\"    \"TNS2\"    \n[171] \"TP53I13\"  \"TPD52L1\"  \"TSPAN4\"   \"TSPYL4\"   \"TULP3\"    \"TYW1\"     \"UPB1\"    ",
        " \"VSIG2\"    \"WIF1\"     \"ZC3H12C\" \n[181] \"ZDHHC6\"   \"ZEB1\"     \"ZFYVE21\"  \"ZNF213\"   \"ZNF385A\"  \"ZNF771\"   \"ZSCAN26\" \n\n",
        "> ",
        "# run fgsea",
        "> ",
        "fgsea <- fgsea(pathways=pathway, stats=rank, nperm=1000)",
        "> ",
        "",
        "> ",
        "fgseaResTidy <- fgsea %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  arrange(desc(NES))",
        "> ",
        "",
        "> ",
        "# Show in a nice table:",
        "> ",
        "fgseaResTidy %>%",
        "+ ",
        "  dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%",
        "+ ",
        "  arrange(padj) %>%",
        "+ ",
        "  DT::datatable()",
        "> ",
        "filtered_pathway <- subset(fgsea, NES > 1.3)",
        "> ",
        "filtered_pathway",
        "> ",
        "",
        "> ",
        "filt_up <- as.vector(filtered_pathway$pathway)",
        "> ",
        "",
        "> ",
        "for (i in filt_up){",
        "+ ",
        "    plt <- plotEnrichment(pathway = pathway[[i]],",
        "+ ",
        "    gseaParam = 1, ticksSize = 0.5, stats= rank) +",
        "+ ",
        "    labs(title=i) + theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))",
        "+ ",
        "    print(plt)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "filtered_pathway <- subset(fgsea, NES < -1.3)",
        "> ",
        "filtered_pathway",
        "> ",
        "",
        "> ",
        "filt_down <- as.vector(filtered_pathway$pathway)",
        "> ",
        "",
        "> ",
        "for (i in filt_down){",
        "+ ",
        "    plt <- plotEnrichment(pathway = pathway[[i]],",
        "+ ",
        "    gseaParam = 1, ticksSize = 0.5, stats= rank) +",
        "+ ",
        "    labs(title=i) + theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))",
        "+ ",
        "    print(plt)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(de_up)",
        "Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'x' in selecting a method for function 'rownames': object 'de_up' not found\n",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(up)",
        "> ",
        "down <- rownames(down)",
        "> ",
        "",
        "> ",
        "# subset matrix to include only DE genes",
        "> ",
        "key <- c(up, down)",
        "> ",
        "subset <- subset[which(rownames(subset) %in% key),]",
        "> ",
        "",
        "> ",
        "# scale and center the values",
        "> ",
        "mat <- as.matrix(scale(t(subset), center = T))",
        "> ",
        "",
        "> ",
        "# basic plot to check we're plotting something sensible",
        "> ",
        "#pheatmap(t(mat))",
        "> ",
        "",
        "> ",
        "# spruce it up a bit..",
        "> ",
        "ann <- data.frame(Condition = c(rep(\"Control\", 3), rep(\"tumour\", 3)))",
        "> ",
        "rownames(ann) <- rownames(mat)",
        "> ",
        "col <- c(\"blue\", \"forestgreen\")",
        "> ",
        "names(col) <- c(\"Control\", \"tumour\")",
        "> ",
        "ann_col <- list(Condition = col)",
        "> ",
        "",
        "> ",
        "pheatmap(t(mat), ",
        "+ ",
        "         show_rownames = FALSE,",
        "+ ",
        "         annotation_col = ann,",
        "+ ",
        "         annotation_colors = ann_col,",
        "+ ",
        "         color = hcl.colors(100, \"PRGn\",rev=F))",
        "Error in seq.default(min(mat, na.rm = TRUE), max(mat, na.rm = TRUE), length.out = n_col) : \n  'from' must be a finite number\n",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(up)",
        "> ",
        "down <- rownames(down)",
        "> ",
        "",
        "> ",
        "# subset matrix to include only DE genes",
        "> ",
        "key <- c(up, down)",
        "> ",
        "subset <- subset[which(rownames(subset) %in% key),]",
        "> ",
        "",
        "> ",
        "# scale and center the values",
        "> ",
        "mat <- as.matrix(scale(t(subset), center = T))",
        "> ",
        "",
        "> ",
        "# basic plot to check we're plotting something sensible",
        "> ",
        "#pheatmap(t(mat))",
        "> ",
        "",
        "> ",
        "# spruce it up a bit..",
        "> ",
        "ann <- data.frame(Condition = c(rep(\"Control\", 3), rep(\"tumour\", 3)))",
        "> ",
        "rownames(ann) <- rownames(mat)",
        "> ",
        "col <- c(\"blue\", \"forestgreen\")",
        "> ",
        "names(col) <- c(\"Control\", \"tumour\")",
        "> ",
        "ann_col <- list(Condition = col)",
        "> ",
        "",
        "> ",
        "pheatmap(t(mat), ",
        "+ ",
        "         show_rownames = FALSE,",
        "+ ",
        "         annotation_col = ann,",
        "+ ",
        "         annotation_colors = ann_col,",
        "+ ",
        "         color = hcl.colors(100, \"PRGn\",rev=F))",
        "Error in seq.default(min(mat, na.rm = TRUE), max(mat, na.rm = TRUE), length.out = n_col) : \n  'from' must be a finite number\n",
        "> ",
        "res1 <- na.omit(tumour_v_ctrl)",
        "> ",
        "",
        "> ",
        "min_width <- min(res1$log2FoldChange)",
        "> ",
        "max_width <- max(res1$log2FoldChange)",
        "> ",
        "max_height <- -log10(min(res1[res1$pvalue>0, 5]))",
        "> ",
        "",
        "> ",
        "up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)",
        "> ",
        "up <- up[order(-up$log2FoldChange),]",
        "> ",
        "up_list <- head(rownames(up), n=10L)",
        "> ",
        "",
        "> ",
        "down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)",
        "> ",
        "down <- down[order(down$log2FoldChange),]",
        "> ",
        "down_list <- head(rownames(down), n=10L)",
        "> ",
        "",
        "> ",
        "plot_top_20 <- c(up_list, down_list)",
        "> ",
        "EnhancedVolcano(res1,",
        "+ ",
        "\t\t\t          lab=rownames(res1),",
        "+ ",
        "          \t\t\tx=\"log2FoldChange\",",
        "+ ",
        "          \t\t\ty=\"pvalue\",",
        "+ ",
        "          \t\t\tselectLab=plot_top_20,",
        "+ ",
        "          \t\t\tdrawConnectors=TRUE,",
        "+ ",
        "          \t\t\tFCcutoff=1.0,",
        "+ ",
        "          \t\t\tpCutoff=0.05,",
        "+ ",
        "          \t\t\ttitle=\"Volcano Plot\",",
        "+ ",
        "          \t\t\tsubtitle=\"tumour vs. Control\",",
        "+ ",
        "          \t\t\tlegendLabSize=8,",
        "+ ",
        "          \t\t\tcaption = paste0('Total Genes = ', nrow(res1)))",
        "> ",
        "",
        "> ",
        "##reset res1 for heatmaps",
        "> ",
        "res1 <- na.omit(res1)",
        "> ",
        "",
        "> ",
        "# subset the counts matrix to get the lung and control samples",
        "> ",
        "subset <- rld_counts[, 1:6]",
        "> ",
        "",
        "> ",
        "# now select de_up, de_down, i.e DE genes that passed the filtering our function produced",
        "> ",
        "up <- rownames(up)",
        "> ",
        "down <- rownames(down)",
        "> ",
        "",
        "> ",
        "# subset matrix to include only DE genes",
        "> ",
        "key <- c(up, down)",
        "> ",
        "subset <- subset[which(rownames(subset) %in% key),]",
        "> ",
        "",
        "> ",
        "# scale and center the values",
        "> ",
        "mat <- as.matrix(scale(t(subset), center = T))",
        "> ",
        "",
        "> ",
        "# basic plot to check we're plotting something sensible",
        "> ",
        "#pheatmap(t(mat))",
        "> ",
        "",
        "> ",
        "# spruce it up a bit..",
        "> ",
        "ann <- data.frame(Condition = c(rep(\"Control\", 3), rep(\"tumour\", 3)))",
        "> ",
        "rownames(ann) <- rownames(mat)",
        "> ",
        "col <- c(\"blue\", \"forestgreen\")",
        "> ",
        "names(col) <- c(\"Control\", \"tumour\")",
        "> ",
        "ann_col <- list(Condition = col)",
        "> ",
        "",
        "> ",
        "pheatmap(t(mat), ",
        "+ ",
        "         show_rownames = FALSE,",
        "+ ",
        "         annotation_col = ann,",
        "+ ",
        "         annotation_colors = ann_col,",
        "+ ",
        "         color = hcl.colors(100, \"PRGn\",rev=F))",
        "\nAttaching package: ‘gridExtra’\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    combine\n\n",
        "The following object is masked from ‘package:Biobase’:\n\n    combine\n\n",
        "The following object is masked from ‘package:BiocGenerics’:\n\n    combine\n\n",
        "\nAttaching package: ‘igraph’\n\n",
        "The following objects are masked from ‘package:lubridate’:\n\n    %--%, union\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    as_data_frame, groups, union\n\n",
        "The following objects are masked from ‘package:purrr’:\n\n    compose, simplify\n\n",
        "The following object is masked from ‘package:tidyr’:\n\n    crossing\n\n",
        "The following object is masked from ‘package:tibble’:\n\n    as_data_frame\n\n",
        "The following object is masked from ‘package:GenomicRanges’:\n\n    union\n\n",
        "The following object is masked from ‘package:IRanges’:\n\n    union\n\n",
        "The following object is masked from ‘package:S4Vectors’:\n\n    union\n\n",
        "The following objects are masked from ‘package:BiocGenerics’:\n\n    normalize, path, union\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    decompose, spectrum\n\n",
        "The following object is masked from ‘package:base’:\n\n    union\n\n",
        "Registered S3 methods overwritten by 'treeio':\n  method              from    \n  MRCA.phylo          tidytree\n  MRCA.treedata       tidytree\n  Nnode.treedata      tidytree\n  Ntip.treedata       tidytree\n  ancestor.phylo      tidytree\n  ancestor.treedata   tidytree\n  child.phylo         tidytree\n  child.treedata      tidytree\n  full_join.phylo     tidytree\n  full_join.treedata  tidytree\n  groupClade.phylo    tidytree\n  groupClade.treedata tidytree\n  groupOTU.phylo      tidytree\n  groupOTU.treedata   tidytree\n  inner_join.phylo    tidytree\n  inner_join.treedata tidytree\n  is.rooted.treedata  tidytree\n  nodeid.phylo        tidytree\n  nodeid.treedata     tidytree\n  nodelab.phylo       tidytree\n  nodelab.treedata    tidytree\n  offspring.phylo     tidytree\n  offspring.treedata  tidytree\n  parent.phylo        tidytree\n  parent.treedata     tidytree\n  root.treedata       tidytree\n  rootnode.phylo      tidytree\n  sibling.phylo       tidytree\n",
        "clusterProfiler v4.8.3  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/\n\nIf you use clusterProfiler in published research, please cite:\nT Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141\n",
        "\nAttaching package: ‘clusterProfiler’\n\n",
        "The following object is masked from ‘package:igraph’:\n\n    simplify\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    simplify\n\n",
        "The following object is masked from ‘package:biomaRt’:\n\n    select\n\n",
        "The following objects are masked from ‘package:plyr’:\n\n    arrange, mutate, rename, summarise\n\n",
        "The following object is masked from ‘package:AnnotationDbi’:\n\n    select\n\n",
        "The following object is masked from ‘package:IRanges’:\n\n    slice\n\n",
        "The following object is masked from ‘package:S4Vectors’:\n\n    rename\n\n",
        "The following object is masked from ‘package:stats’:\n\n    filter\n\n",
        "========================================\nComplexHeatmap version 2.16.0\nBioconductor page: http://bioconductor.org/packages/ComplexHeatmap/\nGithub page: https://github.com/jokergoo/ComplexHeatmap\nDocumentation: http://jokergoo.github.io/ComplexHeatmap-reference\n\nIf you use it in published research, please cite either one:\n- Gu, Z. Complex Heatmap Visualization. iMeta 2022.\n- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional \n    genomic data. Bioinformatics 2016.\n\n\nThe new InteractiveComplexHeatmap package can directly export static \ncomplex heatmaps into an interactive Shiny app with zero effort. Have a try!\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(ComplexHeatmap))\n========================================\n! pheatmap() has been masked by ComplexHeatmap::pheatmap(). Most of the arguments\n   in the original pheatmap() are identically supported in the new function. You \n   can still use the original function by explicitly calling pheatmap::pheatmap().\n\n",
        "\nAttaching package: ‘ComplexHeatmap’\n\n",
        "The following object is masked from ‘package:pheatmap’:\n\n    pheatmap\n\n",
        "========================================\ncirclize version 0.4.15\nCRAN page: https://cran.r-project.org/package=circlize\nGithub page: https://github.com/jokergoo/circlize\nDocumentation: https://jokergoo.github.io/circlize_book/book/\n\nIf you use it in published research, please cite:\nGu, Z. circlize implements and enhances circular visualization\n  in R. Bioinformatics 2014.\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(circlize))\n========================================\n\n",
        "\nAttaching package: ‘circlize’\n\n",
        "The following object is masked from ‘package:igraph’:\n\n    degree\n\n",
        "\nAttaching package: ‘ggpubr’\n\n",
        "The following object is masked from ‘package:plyr’:\n\n    mutate\n\n"
    ]
}